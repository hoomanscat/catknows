name: Daily

on:
  schedule:
    - cron: "5 5 * * *"   # daily at 05:05 UTC (~07:05 Berlin)
  workflow_dispatch:

jobs:
  run-daily:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      SKOOL_COOKIE: ${{ secrets.SKOOL_COOKIE }}
      TENANT_SLUG: "example-tenant"
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      DISCORD_WEBHOOK_STATUS: ${{ secrets.DISCORD_WEBHOOK_STATUS }}
      DISCORD_WEBHOOK_ALERTS: ${{ secrets.DISCORD_WEBHOOK_ALERTS }}
      DISCORD_WEBHOOK_KPI: ${{ secrets.DISCORD_WEBHOOK_KPI }}
      DISCORD_WEBHOOK_MOVERS: ${{ secrets.DISCORD_WEBHOOK_MOVERS }}
      DISCORD_WEBHOOK_HEALTH: ${{ secrets.DISCORD_WEBHOOK_HEALTH }}
      DISCORD_WEBHOOK_NEWJOINERS: ${{ secrets.DISCORD_WEBHOOK_NEWJOINERS }}
      DISCORD_WEBHOOK_SNAPSHOTS: ${{ secrets.DISCORD_WEBHOOK_SNAPSHOTS }}
      DISCORD_WEBHOOK_LOGS: ${{ secrets.DISCORD_WEBHOOK_LOGS }}
      DISCORD_WEBHOOK_CELEBRATIONS: ${{ secrets.DISCORD_WEBHOOK_CELEBRATIONS }}
      DISCORD_WEBHOOK_SHOUTOUTS: ${{ secrets.DISCORD_WEBHOOK_SHOUTOUTS }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
          pip install -e .

      - name: Run daily (guarded)
        run: |
          if [ -z "${SKOOL_COOKIE}" ]; then
            echo "SKOOL_COOKIE not set; skipping live run."
            exit 0
          fi
          skoolhud init-db
          skoolhud add-tenant --slug "${TENANT_SLUG}" --group "${TENANT_SLUG}" --cookie "$SKOOL_COOKIE"
          skoolhud test-tenant --slug "${TENANT_SLUG}"
          python update_all.py
          python skoolhud/ai/agents/run_all_agents.py --slug "${TENANT_SLUG}"

      - name: Verify & capture output
        shell: bash
        run: |
          set -e
          python verify_system.py | tee verify.txt
          echo "Workspace:"
          ls -la

      # OPTIONAL: Reports als Artifact hochladen (schön für Download im Actions-Tab)
      - name: Upload reports artifact (optional)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: reports-${{ env.TENANT_SLUG }}
          path: |
            exports/reports/${{ env.TENANT_SLUG }}/
          if-no-files-found: ignore
          retention-days: 7

      - name: Notify Discord (pretty embed)
        if: ${{ github.event_name == 'workflow_dispatch' || env.DISCORD_WEBHOOK_URL != '' }}
        shell: python
        env:
          WEBHOOK: ${{ env.DISCORD_WEBHOOK_URL }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          import os, json, re, datetime, urllib.request
          webhook = os.environ.get("WEBHOOK")
          if not webhook:
              raise SystemExit("No webhook set")

          # Read verify output
          try:
              with open("verify.txt", "r", encoding="utf-8") as f:
                  raw = f.read()
          except FileNotFoundError:
              raw = "verify_system output missing."

          # Parse quick metrics
          members = re.search(r"Members:\s*(\d+)", raw)
          members_with_pts = re.search(r"with points_all:\s*(\d+)", raw)
          lbs = re.search(r"LeaderboardSnapshots:\s*(\d+)", raw)
          day_today = re.search(r"MemberDailySnapshot:\s*today\s*=\s*(\d+)", raw)
          day_total = re.search(r"MemberDailySnapshot:.*total\s*=\s*(\d+)", raw)

          members = int(members.group(1)) if members else None
          members_with_pts = int(members_with_pts.group(1)) if members_with_pts else None
          lbs = int(lbs.group(1)) if lbs else None
          today = int(day_today.group(1)) if day_today else 0
          total = int(day_total.group(1)) if day_total else None

          status_ok = today > 0
          color = 0x2ecc71 if status_ok else 0xe74c3c  # green / red
          emoji = "✅" if status_ok else "❌"

          slug = os.environ.get("TENANT_SLUG", "tenant")
          run_url = os.environ.get("RUN_URL", "")

          # Trim verify text for discord (2000 chars limit)
          raw_trim = raw.strip()
          if len(raw_trim) > 1900:
              raw_trim = raw_trim[:1900] + "\n… (truncated)"

          # Build fancy embed
          now_iso = datetime.datetime.utcnow().replace(microsecond=0).isoformat() + "Z"
          fields = []
          if members is not None:
              fields.append({"name": "Members", "value": f"{members} (points_all: {members_with_pts or 0})", "inline": True})
          if lbs is not None:
              fields.append({"name": "LB Snapshots", "value": str(lbs), "inline": True})
          fields.append({"name": "Daily Snapshots (today)", "value": str(today), "inline": True})
          if total is not None:
              fields.append({"name": "Daily Snapshots (total)", "value": str(total), "inline": True})

          embed = {
              "title": f"{emoji} SkoolHUD Daily — {slug}",
              "url": run_url,
              "description": f"```text\n{raw_trim}\n```",
              "color": color,
              "fields": fields,
              "timestamp": now_iso,
              "footer": {"text": "SkoolHUD • GitHub Actions"}
          }

          payload = {
              "username": "SkoolHUD Bot",
              "embeds": [embed]
          }

          req = urllib.request.Request(
              webhook,
              data=json.dumps(payload).encode("utf-8"),
              headers={"Content-Type": "application/json"}
          )
          with urllib.request.urlopen(req) as r:
              print("Discord status:", r.status)
      - name: Upload reports (artifact)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: reports-${{ env.TENANT_SLUG }}
          path: |
            exports/reports/${{ env.TENANT_SLUG }}/
          if-no-files-found: warn
          retention-days: 7
